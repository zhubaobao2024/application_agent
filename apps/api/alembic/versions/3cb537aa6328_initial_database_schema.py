"""Initial database schema

Revision ID: 3cb537aa6328
Revises: 
Create Date: 2025-10-16 08:25:21.466942

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '3cb537aa6328'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('email_confirmed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='auth'
    )
    op.create_index(op.f('ix_auth_users_email'), 'users', ['email'], unique=True, schema='auth')
    op.create_table('jobs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('external_id', sa.String(length=255), nullable=True),
    sa.Column('source', sa.String(length=50), nullable=False),
    sa.Column('source_url', sa.String(length=1000), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('company', sa.String(length=255), nullable=False),
    sa.Column('company_logo_url', sa.String(length=500), nullable=True),
    sa.Column('location', sa.String(length=255), nullable=True),
    sa.Column('remote_type', sa.String(length=50), nullable=True),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('requirements', sa.Text(), nullable=True),
    sa.Column('responsibilities', sa.Text(), nullable=True),
    sa.Column('salary_min', sa.Integer(), nullable=True),
    sa.Column('salary_max', sa.Integer(), nullable=True),
    sa.Column('salary_currency', sa.String(length=10), nullable=True),
    sa.Column('employment_type', sa.String(length=50), nullable=True),
    sa.Column('experience_level', sa.String(length=50), nullable=True),
    sa.Column('required_skills', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('preferred_skills', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('benefits', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('posted_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('scraped_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('parsed_requirements', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('relevance_score', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_jobs_external_source', 'jobs', ['external_id', 'source'], unique=True)
    op.create_index('idx_jobs_posted_date', 'jobs', [sa.literal_column('posted_date DESC')], unique=False)
    op.create_index('idx_jobs_skills', 'jobs', ['required_skills'], unique=False, postgresql_using='gin')
    op.create_index('idx_jobs_title_company', 'jobs', ['title', 'company'], unique=False)
    op.create_index(op.f('ix_jobs_company'), 'jobs', ['company'], unique=False)
    op.create_index(op.f('ix_jobs_is_active'), 'jobs', ['is_active'], unique=False)
    op.create_index(op.f('ix_jobs_source'), 'jobs', ['source'], unique=False)
    op.create_index(op.f('ix_jobs_title'), 'jobs', ['title'], unique=False)
    op.create_table('cover_letters',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('job_id', sa.UUID(), nullable=True),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('tone', sa.String(length=50), nullable=True),
    sa.Column('ai_model', sa.String(length=50), nullable=True),
    sa.Column('generation_params', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['job_id'], ['jobs.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_cover_letters_job_id'), 'cover_letters', ['job_id'], unique=False)
    op.create_index(op.f('ix_cover_letters_user_id'), 'cover_letters', ['user_id'], unique=False)
    op.create_table('cv_templates',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('layout_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('sections_order', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('thumbnail_url', sa.String(length=500), nullable=True),
    sa.Column('is_default', sa.Boolean(), nullable=True),
    sa.Column('is_public', sa.Boolean(), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['auth.users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('projects',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('detailed_description', sa.Text(), nullable=True),
    sa.Column('technologies', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('role', sa.String(length=100), nullable=True),
    sa.Column('start_date', sa.Date(), nullable=True),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.Column('github_url', sa.String(length=500), nullable=True),
    sa.Column('demo_url', sa.String(length=500), nullable=True),
    sa.Column('achievements', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('metrics', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_featured', sa.Boolean(), nullable=True),
    sa.Column('relevance_tags', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_projects_relevance_tags'), 'projects', ['relevance_tags'], unique=False)
    op.create_index(op.f('ix_projects_user_id'), 'projects', ['user_id'], unique=False)
    op.create_table('user_job_preferences',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('job_id', sa.UUID(), nullable=False),
    sa.Column('is_favorited', sa.Boolean(), nullable=True),
    sa.Column('is_hidden', sa.Boolean(), nullable=True),
    sa.Column('custom_notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['job_id'], ['jobs.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_user_job_prefs_unique', 'user_job_preferences', ['user_id', 'job_id'], unique=True)
    op.create_table('user_profiles',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('full_name', sa.String(length=255), nullable=False),
    sa.Column('phone', sa.String(length=50), nullable=True),
    sa.Column('location', sa.String(length=255), nullable=True),
    sa.Column('linkedin_url', sa.String(length=500), nullable=True),
    sa.Column('github_url', sa.String(length=500), nullable=True),
    sa.Column('portfolio_url', sa.String(length=500), nullable=True),
    sa.Column('target_roles', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('preferred_locations', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('desired_salary_min', sa.Integer(), nullable=True),
    sa.Column('desired_salary_max', sa.Integer(), nullable=True),
    sa.Column('willing_to_relocate', sa.Boolean(), nullable=True),
    sa.Column('summary', sa.Text(), nullable=True),
    sa.Column('skills', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('education', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('work_experience', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_profiles_user_id'), 'user_profiles', ['user_id'], unique=True)
    op.create_table('generated_cvs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('job_id', sa.UUID(), nullable=True),
    sa.Column('content', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('html_content', sa.Text(), nullable=True),
    sa.Column('pdf_url', sa.String(length=500), nullable=True),
    sa.Column('template_id', sa.UUID(), nullable=True),
    sa.Column('ai_model', sa.String(length=50), nullable=True),
    sa.Column('generation_params', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('included_projects', postgresql.ARRAY(sa.UUID()), nullable=True),
    sa.Column('highlighted_skills', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('version', sa.Integer(), nullable=True),
    sa.Column('is_latest', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['job_id'], ['jobs.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['template_id'], ['cv_templates.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_generated_cvs_job_id'), 'generated_cvs', ['job_id'], unique=False)
    op.create_index(op.f('ix_generated_cvs_user_id'), 'generated_cvs', ['user_id'], unique=False)
    op.create_table('applications',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('job_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('applied_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('cv_id', sa.UUID(), nullable=True),
    sa.Column('cover_letter_id', sa.UUID(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('follow_up_date', sa.Date(), nullable=True),
    sa.Column('interview_dates', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('external_application_id', sa.String(length=255), nullable=True),
    sa.Column('source_applied', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['cover_letter_id'], ['cover_letters.id'], ),
    sa.ForeignKeyConstraint(['cv_id'], ['generated_cvs.id'], ),
    sa.ForeignKeyConstraint(['job_id'], ['jobs.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_applications_user_job', 'applications', ['user_id', 'job_id'], unique=True)
    op.create_index(op.f('ix_applications_job_id'), 'applications', ['job_id'], unique=False)
    op.create_index(op.f('ix_applications_status'), 'applications', ['status'], unique=False)
    op.create_index(op.f('ix_applications_user_id'), 'applications', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_applications_user_id'), table_name='applications')
    op.drop_index(op.f('ix_applications_status'), table_name='applications')
    op.drop_index(op.f('ix_applications_job_id'), table_name='applications')
    op.drop_index('idx_applications_user_job', table_name='applications')
    op.drop_table('applications')
    op.drop_index(op.f('ix_generated_cvs_user_id'), table_name='generated_cvs')
    op.drop_index(op.f('ix_generated_cvs_job_id'), table_name='generated_cvs')
    op.drop_table('generated_cvs')
    op.drop_index(op.f('ix_user_profiles_user_id'), table_name='user_profiles')
    op.drop_table('user_profiles')
    op.drop_index('idx_user_job_prefs_unique', table_name='user_job_preferences')
    op.drop_table('user_job_preferences')
    op.drop_index(op.f('ix_projects_user_id'), table_name='projects')
    op.drop_index(op.f('ix_projects_relevance_tags'), table_name='projects')
    op.drop_table('projects')
    op.drop_table('cv_templates')
    op.drop_index(op.f('ix_cover_letters_user_id'), table_name='cover_letters')
    op.drop_index(op.f('ix_cover_letters_job_id'), table_name='cover_letters')
    op.drop_table('cover_letters')
    op.drop_index(op.f('ix_jobs_title'), table_name='jobs')
    op.drop_index(op.f('ix_jobs_source'), table_name='jobs')
    op.drop_index(op.f('ix_jobs_is_active'), table_name='jobs')
    op.drop_index(op.f('ix_jobs_company'), table_name='jobs')
    op.drop_index('idx_jobs_title_company', table_name='jobs')
    op.drop_index('idx_jobs_skills', table_name='jobs', postgresql_using='gin')
    op.drop_index('idx_jobs_posted_date', table_name='jobs')
    op.drop_index('idx_jobs_external_source', table_name='jobs')
    op.drop_table('jobs')
    op.drop_index(op.f('ix_auth_users_email'), table_name='users', schema='auth')
    op.drop_table('users', schema='auth')
    # ### end Alembic commands ###
